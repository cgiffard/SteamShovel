mixin stats(data)
	table.statRundown
		thead: tr
			th Kind
			th Covered
			th Total
			th Percentage
		tbody
			each stats, statType in data
				tr
					th=statType
					td=((stats.covered*100000)|0)/100000
					td=stats.total
					td=(((stats.percentage*1000)|0) / 1000) + "%"

mixin file(file)
	div.file(id=file.key)
		header.fileHeader
			h2=file.filename
			+stats(file.stats)

		pre
			each item, key in file.codeMap
				if (!item.close && !item.open)
					if (item.match(/\s\s+/) || item.match(/\t/))
						span.whitespace=item
					else
						span.token=item
				else
					if (item.open && item.open.results.length)
						| <span
						| 	class="item #{item.open.type}
						|	evaluated depth#{item.open.depth}"
						|	data-score="#{item.open.score}"
						|	data-depth="#{item.open.depth}"
						|	data-type="#{item.open.type}"
						|	data-rss="#{item.open.avgMemChanges.rss}"
						|	data-heapused="#{item.open.avgMemChanges.heapUsed}"
						| data-heaptotal="#{item.open.avgMemChanges.heapTotal}">
					if (item.open && !item.open.results.length)
						| <span
						|	class="item #{item.open.type}
						|	unevaluated">
					if (item.close)
						| </span>

mixin sidebar(files)
	aside.sidebar
		nav: ul
			each file, index in files
				- var expressions = file.stats.expressions;
				li(class="file", data-coverage=expressions.percentage)
					a(href="#"+file.key)
						span.coverage= expressions.percentage|0
						span.filename!= file.filename.replace(/\//ig,"/&shy;")

mixin main(files)
	main
		each file, key in files
			+file(file)

doctype html
html(lang=en)
	head
		meta(charset="utf8")
		style(type="text/css", media="screen")!= style

	body
		+sidebar(files)

		div.body
			header.docHeader
				h1 Coverage Report
				+stats(stats)
				div#guide
					h3 Key
					p
						| SteamShovel uses the stack depth to determine how
						| directly code was tested. Code which was not tested
						| directly is not considered highly in the coverage
						| output.
			+main(files)

		script!= script


